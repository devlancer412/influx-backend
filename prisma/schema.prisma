// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id         Int            @id @default(autoincrement())
  influencer Influencer?
  brand      Brand?
  issues     IssuesReport[]
  payments   PaymentLog[]
  telegram   Telegram?
  twitter    Twitter?
  tiktok     Tiktok?
  instagram  Instagram?
  youtube    Youtube?
  name       String
  email      String         @unique
  logo       String?         @db.VarChar(1000)
  region     String
  language   String
}

model Influencer {
  id             Int                  @id @default(autoincrement())
  accountId      Int                  @unique
  account        Account              @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaigns      CampaignInfluencer[]
  isVIP          Boolean
  engagementRate EngagementRate
  loginChannel   Channel?
  mainChannel    Channel?
  promotionType  PromotionType        @default(PaidPromo)
  niche          String?
  contactLink    String?
}

enum PromotionType {
  PaidPromo
  MayDoPaidPromo
}

enum EngagementRate {
  Poor
  Ok
  Good
  Great
}

enum Channel {
  Telegram
  Twitter
  Tiktok
  Instagram
  Youtube
}

model Brand {
  id          Int        @id @default(autoincrement())
  accountId   Int        @unique
  account     Account    @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaigns   Campaign[]
  desc        String     @db.Text
  salesPhase  SalesPhase
  budget      Float      @db.Float
  isVetted    Boolean
  pdfAudit    Boolean
  pdfReview   Boolean
  profileLive Boolean
}

enum SalesPhase {
  PreLaunch
  Presale
  Launched
}

model Campaign {
  id          Int                  @id @default(autoincrement())
  influencers CampaignInfluencer[]
  name        String
  avgER       AvgER
  template    String?              @db.VarChar(1000)
  negoBudget  Float                @default(0) @db.Float
  creator     Int
  brand       Brand                @relation(fields: [creator], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum AvgER {
  Poor
  Normal
  Good
  Excellent
}

model CampaignInfluencer {
  id               Int            @id @default(autoincrement())
  campaignId       Int
  campaign         Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  influencerId     Int
  influencer       Influencer     @relation(fields: [influencerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status           CampaignStatus
  negotiatedBudget Float          @default(0) @db.Float

  @@unique([campaignId, influencerId])
}

enum CampaignStatus {
  NotContacted
  Outreached
  InNegotiation
  WaitingForPostDetails
  PaymentDone
  PostDone
  Cancelled
}

model IssuesReport {
  id        Int     @id @default(autoincrement())
  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  issue     String  @db.Text
}

model PaymentLog {
  id            Int     @id @default(autoincrement())
  transactionId String
  amount        Float   @db.Float
  walletAddress String
  accountId     Int
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Telegram {
  id                  Int               @id @default(autoincrement())
  telegramHistory     TelegramHistory[]
  username            String
  channelMembers      Int               @default(0)
  accountId           Int               @unique
  account             Account           @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialUrl           String
  averageInteractions Int               @default(0)
}

model TelegramHistory {
  id           Int      @id @default(autoincrement())
  telegramId   Int
  telegram     Telegram @relation(fields: [telegramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date         DateTime @db.Date
  interactions Int
}

model Twitter {
  id                 Int              @id @default(autoincrement())
  twitterHistory     TwitterHistory[]
  username           String
  followers          Int              @default(0)
  accountId          Int              @unique
  account            Account          @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialUrl          String
  averageImpressions Int              @default(0)
}

model TwitterHistory {
  id          Int      @id @default(autoincrement())
  twitterId   Int
  twitter     Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date        DateTime @db.Date
  impressions Int
}

model Tiktok {
  id            Int             @id @default(autoincrement())
  tiktokHistory TiktokHistory[]
  username      String
  followers     Int             @default(0)
  accountId     Int             @unique
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialUrl     String
  averageLikes  Int             @default(0)
}

model TiktokHistory {
  id       Int      @id @default(autoincrement())
  tiktokId Int
  tiktok   Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date     DateTime @db.Date
  likes    Int
}

model Instagram {
  id                  Int                @id @default(autoincrement())
  instagramHistory    InstagramHistory[]
  username            String
  followers           Int                @default(0)
  accountId           Int                @unique
  account             Account            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialUrl           String
  averageInteractions Int                @default(0)
}

model InstagramHistory {
  id           Int       @id @default(autoincrement())
  instagramId  Int
  instagram    Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date         DateTime  @db.Date
  interactions Int
}

model Youtube {
  id             Int              @id @default(autoincrement())
  youtubeHistory YoutubeHistory[]
  username       String
  subscribers    Int              @default(0)
  accountId      Int              @unique
  account        Account          @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socialUrl      String
  averageViews   Int              @default(0)
}

model YoutubeHistory {
  id          Int      @id @default(autoincrement())
  youtubeId   Int
  youtube     Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date        DateTime @db.Date
  views       Int
  subscribers Int
}

model AdminAccount {
  id                       Int       @id @default(autoincrement())
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @default(now()) @updatedAt
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.VarChar(500)
  access_token             String?   @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int        @id @default(autoincrement())
  sessionToken String     @unique
  expires      DateTime
  user         AdminUser? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
}

model AdminUser {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  email     String?        @unique
  password  String?
  role      String?        @default("admin")
  accounts  AdminAccount[]
  sessions  Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
